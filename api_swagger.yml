swagger: "2.0"
info:
  description: "The transaction api documentation."
  version: "1.0.0"
  title: "Transaction Api"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "gabrieldfnsc@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api/v1"
tags:
- name: "user"
  description: "User's endpoints."
- name: "transaction"
  description: "Transaction's endpoints."
schemes:
- "https"
- "http"
paths:
  /transfers:
    post:
      tags:
      - "transaction"
      summary: "Store a new transaction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "transaction"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Transaction"
      responses:
        "202":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Success!!!"
              data:
                type: "object"
                properties:
                  transaction:
                    type: "object"
                    properties:
                      payee_id:
                        type: "integer"
                        example: 2
                      payer_id:
                        type: "integer"
                        example: 1
                      amount:
                        type: "number"
                        format: "float"
                        example: "100.99"
        "406":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "The payer id is different from the user that is currently authenticated."
              data:
                type: "object"
        "500":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error"
              data:
                type: "object"
      security:
      - api_key: []
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Create a new user and log him in."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "202":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Success!!!"
              data:
                type: "object"
                properties:
                  user:
                    type: "object"
                    properties:
                      name:
                        type: "string"
                        example: "Lorem Ipsum"
                      auth:
                        type: "object"
                        properties:
                          token:
                            type: "string"
                            example: "1|W5o31rfs5hlz6Mq5GbL381OGnptKQBYy8psyfO1d"
        "422":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "The email has already been taken."
              data:
                type: "object"
        "500":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error"
              data:
                type: "object"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Login user"
      description: "Login the user."
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "Created user object"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
              example: "random@email.com"
            password:
              type: "string"
              example: "secret"
      responses:
        "202":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Success!!!"
              data:
                type: "object"
                properties:
                  user:
                    type: "object"
                    properties:
                      name:
                        type: "string"
                        example: "Lorem Ipsum"
                      auth:
                        type: "object"
                        properties:
                          token:
                            type: "string"
                            example: "1|W5o31rfs5hlz6Mq5GbL381OGnptKQBYy8psyfO1d"
        "403":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "The given data is invalid."
              data:
                type: "object"
        "500":
          description: "Success"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Error"
              data:
                type: "object"
definitions:
  User:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Lorem Ipsum"
      email:
        type: "string"
        example: "random@email.com"
      password:
        type: "string"
        example: "secret"
      registration_number:
        type: "string"
        example: "12345678909"
      type:
        type: "string"
        example: "regular"
  Transaction:
    type: "object"
    required:
    - "payee_id"
    - "payer_id"
    - "amount"
    properties:
      payee_id:
        type: "integer"
        example: 2
      payer_id:
        type: "integer"
        example: 1
      amount:
        type: "number"
        format: "float"
        example: "100.99"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
